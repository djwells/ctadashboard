// Code generated by go-bindata.
// sources:
// arrivals_api_valid_response.xml
// DO NOT EDIT!

package testdata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _arrivals_api_valid_responseXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x99\xdd\x4e\xe3\x38\x14\xc7\xef\x79\x8a\xa8\x37\x7b\x05\xf1\x47\x62\x3b\x28\x04\xb1\x45\xb0\x68\x59\x40\x62\x5f\xc0\x34\xa1\xad\x9a\x8f\xca\x71\x61\x78\xfb\xb1\x9d\x74\x06\xe8\x69\x83\x0a\xd3\xd0\xab\xda\xc7\xff\x98\x92\x1f\xff\x73\x8e\x4d\x7c\xfa\xa3\xc8\xbd\xa7\x4c\xd5\xd3\xaa\x3c\x19\xe0\x23\x34\xf0\xb2\x72\x54\xa5\xd3\x72\x7c\x32\x58\xe8\xc7\x43\x31\x38\x4d\x0e\xe2\x91\x96\x5a\x27\x07\x9e\x17\xeb\xa2\xd6\x09\x41\x98\x21\x8e\xb1\x47\xd0\x71\x10\x1d\x87\x3c\xf6\x5d\xdc\x0a\x32\xa5\x86\x69\x82\x62\xbf\x19\xb4\xa1\x9b\xc2\x6f\x86\x5a\xda\x4f\x33\xaa\xb5\xbc\x4a\x93\x00\x51\x61\xb4\xcd\x64\xb9\x30\x37\x63\x8a\x10\x0f\xed\xc2\xfc\xd5\x82\xbc\x29\x92\x61\x2e\xd5\xcc\xbf\x96\xb3\xcc\x3d\x66\x22\xbf\x1e\x3b\xcf\x92\xfb\x4c\x3d\x4d\x47\x99\x27\xb5\x77\xbb\xd0\x99\xf2\xae\xab\x6a\xee\xcd\x73\xa9\x1f\x2b\x55\xb8\xfd\x8c\xaa\x79\x42\x95\x09\x23\x38\xf6\xcd\x67\x1b\xd0\xc9\xa5\x99\xea\x76\x9a\x66\xb5\xbe\xd7\xf6\x9b\xa0\x20\xf6\xdb\xd9\xef\x25\xf3\x93\xff\x91\x2a\xcf\x8a\xf6\xcb\xb4\xb1\x46\xa0\xd5\xb9\x4a\xcc\xde\xee\xb3\x09\xcd\x55\xba\xf2\xe6\xa8\x88\x7d\x17\x6f\x24\x52\xa9\xff\xdf\x48\x42\xe4\x24\x2e\xde\x48\xa6\xf5\xd9\x7c\x6e\x77\x6e\x06\xcb\xe0\xfd\x68\x62\xdf\x79\x33\x58\x06\xcf\xf3\x97\x26\x68\x07\xcb\xe0\x45\xae\x9b\xa0\x1d\x34\xc1\xc7\x5c\x8e\x6b\xbf\x9d\x98\x57\x95\x04\xf8\x48\x88\x90\x9b\xdf\xda\xce\xda\x78\x55\x26\x87\x82\x1f\x31\xc2\x11\x33\x0b\xd5\xf2\xad\x4d\x32\x69\xff\x5c\x12\x13\x8f\xfd\xe5\xc4\xb2\xf6\x5b\xd8\xdf\x0d\x7a\x40\xd1\x5b\xe8\x7f\xab\x12\xc2\x4e\x82\x08\xc6\xfe\xef\xb4\x78\x90\x79\xbe\x25\xf2\xa0\x03\x39\x76\x92\x15\xe4\x68\x07\xc8\x09\xc3\x30\x72\x86\x39\x84\x9c\x86\xe2\x2b\x90\x07\x9f\x42\x7e\x55\x96\xdd\x3e\xc7\xe4\x23\x3e\xb7\x89\x0c\x02\x7e\x56\x4f\x72\x59\xa6\x3e\xa3\x2a\x85\xa8\x87\xdd\xd4\x79\xb7\xd1\xf9\x37\x33\x3a\xc5\x02\x43\xd4\x45\xf4\x79\xe8\x74\x2b\x9f\x2f\x1e\x9e\xe5\x8b\x57\xb7\xec\x75\xf5\x2c\x55\xea\xdd\xfe\x65\xd2\x70\xb6\x82\x9c\x90\xe0\x9d\xcb\xf3\x45\x06\x51\xc7\x1c\xc3\xd4\x97\x1b\x6f\xe3\x72\x4c\x3b\x78\x13\x27\xe9\xc3\xe5\x5c\x60\x01\xbb\x3c\xa2\x7f\xd0\xe4\x3b\xc8\xeb\x2b\xc4\x77\x99\xd7\x09\xeb\x20\xce\x9c\xa4\x17\xe2\x4c\x84\xb0\xc3\x09\x05\x4b\xf9\x57\x38\x7c\x17\x69\x9d\x5a\x0f\xbd\x26\x7e\x37\x2d\x67\xa0\xc7\xf1\x9a\x0e\x2e\x0c\xf4\xc4\x1f\x66\xaa\x90\xb3\xed\x12\x3b\x0e\x3b\xb1\x5b\x49\x2f\xe5\x7c\x6d\x62\x47\x16\xf0\xfe\x62\xe7\xd6\x48\xaf\xb1\xdf\xaa\x31\x48\x5d\x10\x98\xfa\x7f\xd3\xd4\x14\x92\x2d\x2b\x79\xd4\x01\x5c\x38\x49\x1f\xc0\x19\x13\x74\x4d\xff\x66\x73\x38\x94\xda\xf7\xa2\x94\x63\xdb\x1a\xf5\x56\xca\x29\xd9\x04\x1c\x1f\x23\xe4\x24\xbd\x24\xf6\x90\xc3\xc0\x59\x44\x42\xd0\xe1\x5f\x50\xca\xe9\x56\x0e\x07\x79\x5f\x54\xca\x00\xf1\xee\xcc\x93\xab\xd0\x83\xf7\xa7\xb4\x35\xd0\x11\x5f\xd3\xb5\xbf\xd9\x7d\x1b\xab\x93\x8d\x4d\xbb\x21\x8f\x9d\xa4\x07\xf2\x91\xeb\x6e\x01\xf0\x11\x67\x04\x02\x8f\xed\x45\xc7\x3e\xe4\x76\x64\xab\x65\xe7\x49\x0d\xd3\x35\x2d\xdc\xb0\xd2\x5a\x8e\x33\xef\x52\x55\x4f\xa0\xdf\x3f\x50\xd1\xbb\xa8\x13\x27\xe9\xa5\xa2\xdb\xce\x75\x95\x3a\xc7\x2c\x04\xa9\xdb\x86\x7e\x3f\x3a\xf7\xa8\xcf\xce\xbd\x0b\x38\xed\xcd\xe6\x08\x13\x90\x38\xa3\x0c\xbc\x90\x71\x1d\xcf\x9e\x24\x78\x62\x8f\xa1\xfd\x26\x78\xbc\xf1\xcc\x66\xc8\x0b\x27\xe9\x83\x7c\x68\x7b\x5c\xc0\xea\x44\x84\x30\x79\xbc\x27\xcd\x3b\xc5\xbc\xef\x33\xdb\xe6\x5b\x77\x87\x1d\xbc\x75\xdf\x41\x86\x0f\x69\x04\x16\x76\x8e\x39\x05\x6f\x67\xe0\x33\x5b\xec\xb7\xff\xb1\xf9\x19\x00\x00\xff\xff\xb5\xdd\x4d\xd7\xe1\x19\x00\x00")

func arrivals_api_valid_responseXmlBytes() ([]byte, error) {
	return bindataRead(
		_arrivals_api_valid_responseXml,
		"arrivals_api_valid_response.xml",
	)
}

func arrivals_api_valid_responseXml() (*asset, error) {
	bytes, err := arrivals_api_valid_responseXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "arrivals_api_valid_response.xml", size: 6625, mode: os.FileMode(420), modTime: time.Unix(1468454190, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"arrivals_api_valid_response.xml": arrivals_api_valid_responseXml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"arrivals_api_valid_response.xml": &bintree{arrivals_api_valid_responseXml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
